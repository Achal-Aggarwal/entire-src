 ___    _____                 _ _               _   _             
|_ _|  / / _ \   _ __ ___  __| (_)_ __ ___  ___| |_(_) ___  _ __  
 | |  / / | | | | '__/ _ \/ _` | | '__/ _ \/ __| __| |/ _ \| '_ \ 
 | | / /| |_| | | | |  __/ (_| | | | |  __/ (__| |_| | (_) | | | |
|___/_/  \___/  |_|  \___|\__,_|_|_|  \___|\___|\__|_|\___/|_| |_|
                                                                  
1. Simple input
2. Simple output
3. Appending 
4. Here document

C programs : STDIN, STDOUT. OS FEATURES, 0 : input, 1 : output, 2 : error. Any other socket etc you might open will have a socket number beyond that.

Not every program can read from the standard input.

A process can be connected to both I and O

cat - < t2.txt : Does not use the inbuilt redirection!!
this is an inbuilt feature of cat!

<< is called the here document. Eg creating a multi line file using this command.

eg :cat << EOF > f2.txt
>line1
>line2
>line3
>EOF
EOF : Any string which if is in a line itself in the input that is following, it will stop. One example may be to embed the gnuplot command inside the script.
gnuplot << EOF
=============================================================================

 ____  _             _                                    _ _       
/ ___|| |_ ___  _ __(_)_ __   __ _    _ __ ___  ___ _   _| | |_ ___ 
\___ \| __/ _ \| '__| | '_ \ / _` |  | '__/ _ \/ __| | | | | __/ __|
 ___) | || (_) | |  | | | | | (_| |  | | |  __/\__ \ |_| | | |_\__ \
|____/ \__\___/|_|  |_|_| |_|\__, |  |_|  \___||___/\__,_|_|\__|___/
                             |___/                                  

Storing the results in a variable :

1. $( cmd )
2. `cmd`

=============================================================================

    _                               _ _             
   / \   _ __  _ __   ___ _ __   __| (_)_ __   __ _ 
  / _ \ | '_ \| '_ \ / _ \ '_ \ / _` | | '_ \ / _` |
 / ___ \| |_) | |_) |  __/ | | | (_| | | | | | (_| |
/_/   \_\ .__/| .__/ \___|_| |_|\__,_|_|_| |_|\__, |
        |_|   |_|                             |___/ 
                     _ _       
 _ __ ___  ___ _   _| | |_ ___ 
| '__/ _ \/ __| | | | | __/ __|
| | |  __/\__ \ |_| | | |_\__ \
|_|  \___||___/\__,_|_|\__|___/
                               
You can append the output of functions or loops to a separate file.
see t.sh for an example.

Any bunch of commands enclosed within  structure can be redirected to a separate file.

=============================================================================

##
SEQ
##

There is a command called seq, seq which just prints seq of numbers given 2 args. Can be 
used to write a C style for loop.
seq 5 10
for x in `seq 1 5`;do
let y=y+x
done
*which followed by command name tells you that when you try to run a command, which binary will be executed.
*whereis tells you about all the binaries.

=============================================================================

eval : Just evaluates the command that follows it.
with eval, you can dynamically run commands

=============================================================================

 ____  _                 
|  _ \(_)_ __   ___  ___ 
| |_) | | '_ \ / _ \/ __|
|  __/| | |_) |  __/\__ \
|_|   |_| .__/ \___||___/
      |_| 

> You can move the input of one command to the stdout of another, there is no restriction, you can create such a chain!
> You cannot have a tree, has to be a chain.

learn : cat, grep, wc, cut, paste, tr, head, tail, sort, find

note the diff in the output of wc < p1.txt and wc p1.txt


####
Reading a loop from the command line
###

    while read line
        do
        echo $line
    done

and if you do 
    done < fileName

##EOF##
CTRL + D is the end of file for standard input.
